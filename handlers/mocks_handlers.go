// Code generated by moq; DO NOT EDIT
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/codelist"
	"sync"
)

var (
	lockCodeListClientMockGetCodeByID           sync.RWMutex
	lockCodeListClientMockGetCodeListEditions   sync.RWMutex
	lockCodeListClientMockGetCodes              sync.RWMutex
	lockCodeListClientMockGetDatasetsByCode     sync.RWMutex
	lockCodeListClientMockGetGeographyCodeLists sync.RWMutex
	lockCodeListClientMockHealthcheck           sync.RWMutex
)

// CodeListClientMock is a mock implementation of CodeListClient.
//
//     func TestSomethingThatUsesCodeListClient(t *testing.T) {
//
//         // make and configure a mocked CodeListClient
//         mockedCodeListClient := &CodeListClientMock{
//             GetCodeByIDFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error) {
// 	               panic("TODO: mock out the GetCodeByID method")
//             },
//             GetCodeListEditionsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error) {
// 	               panic("TODO: mock out the GetCodeListEditions method")
//             },
//             GetCodesFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error) {
// 	               panic("TODO: mock out the GetCodes method")
//             },
//             GetDatasetsByCodeFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error) {
// 	               panic("TODO: mock out the GetDatasetsByCode method")
//             },
//             GetGeographyCodeListsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error) {
// 	               panic("TODO: mock out the GetGeographyCodeLists method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("TODO: mock out the Healthcheck method")
//             },
//         }
//
//         // TODO: use mockedCodeListClient in code that requires CodeListClient
//         //       and then make assertions.
//
//     }
type CodeListClientMock struct {
	// GetCodeByIDFunc mocks the GetCodeByID method.
	GetCodeByIDFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error)

	// GetCodeListEditionsFunc mocks the GetCodeListEditions method.
	GetCodeListEditionsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error)

	// GetCodesFunc mocks the GetCodes method.
	GetCodesFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error)

	// GetDatasetsByCodeFunc mocks the GetDatasetsByCode method.
	GetDatasetsByCodeFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error)

	// GetGeographyCodeListsFunc mocks the GetGeographyCodeLists method.
	GetGeographyCodeListsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error)

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCodeByID holds details about calls to the GetCodeByID method.
		GetCodeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
			// CodeID is the codeID argument value.
			CodeID string
		}
		// GetCodeListEditions holds details about calls to the GetCodeListEditions method.
		GetCodeListEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
		}
		// GetCodes holds details about calls to the GetCodes method.
		GetCodes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
		}
		// GetDatasetsByCode holds details about calls to the GetDatasetsByCode method.
		GetDatasetsByCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
			// CodeID is the codeID argument value.
			CodeID string
		}
		// GetGeographyCodeLists holds details about calls to the GetGeographyCodeLists method.
		GetGeographyCodeLists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
	}
}

// GetCodeByID calls GetCodeByIDFunc.
func (mock *CodeListClientMock) GetCodeByID(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error) {
	if mock.GetCodeByIDFunc == nil {
		panic("moq: CodeListClientMock.GetCodeByIDFunc is nil but CodeListClient.GetCodeByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
		CodeID:           codeID,
	}
	lockCodeListClientMockGetCodeByID.Lock()
	mock.calls.GetCodeByID = append(mock.calls.GetCodeByID, callInfo)
	lockCodeListClientMockGetCodeByID.Unlock()
	return mock.GetCodeByIDFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition, codeID)
}

// GetCodeByIDCalls gets all the calls that were made to GetCodeByID.
// Check the length with:
//     len(mockedCodeListClient.GetCodeByIDCalls())
func (mock *CodeListClientMock) GetCodeByIDCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
	CodeID           string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}
	lockCodeListClientMockGetCodeByID.RLock()
	calls = mock.calls.GetCodeByID
	lockCodeListClientMockGetCodeByID.RUnlock()
	return calls
}

// GetCodeListEditions calls GetCodeListEditionsFunc.
func (mock *CodeListClientMock) GetCodeListEditions(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error) {
	if mock.GetCodeListEditionsFunc == nil {
		panic("moq: CodeListClientMock.GetCodeListEditionsFunc is nil but CodeListClient.GetCodeListEditions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
	}
	lockCodeListClientMockGetCodeListEditions.Lock()
	mock.calls.GetCodeListEditions = append(mock.calls.GetCodeListEditions, callInfo)
	lockCodeListClientMockGetCodeListEditions.Unlock()
	return mock.GetCodeListEditionsFunc(ctx, userAuthToken, serviceAuthToken, codeListID)
}

// GetCodeListEditionsCalls gets all the calls that were made to GetCodeListEditions.
// Check the length with:
//     len(mockedCodeListClient.GetCodeListEditionsCalls())
func (mock *CodeListClientMock) GetCodeListEditionsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
	}
	lockCodeListClientMockGetCodeListEditions.RLock()
	calls = mock.calls.GetCodeListEditions
	lockCodeListClientMockGetCodeListEditions.RUnlock()
	return calls
}

// GetCodes calls GetCodesFunc.
func (mock *CodeListClientMock) GetCodes(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error) {
	if mock.GetCodesFunc == nil {
		panic("moq: CodeListClientMock.GetCodesFunc is nil but CodeListClient.GetCodes was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
	}
	lockCodeListClientMockGetCodes.Lock()
	mock.calls.GetCodes = append(mock.calls.GetCodes, callInfo)
	lockCodeListClientMockGetCodes.Unlock()
	return mock.GetCodesFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition)
}

// GetCodesCalls gets all the calls that were made to GetCodes.
// Check the length with:
//     len(mockedCodeListClient.GetCodesCalls())
func (mock *CodeListClientMock) GetCodesCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
	}
	lockCodeListClientMockGetCodes.RLock()
	calls = mock.calls.GetCodes
	lockCodeListClientMockGetCodes.RUnlock()
	return calls
}

// GetDatasetsByCode calls GetDatasetsByCodeFunc.
func (mock *CodeListClientMock) GetDatasetsByCode(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error) {
	if mock.GetDatasetsByCodeFunc == nil {
		panic("moq: CodeListClientMock.GetDatasetsByCodeFunc is nil but CodeListClient.GetDatasetsByCode was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
		CodeID:           codeID,
	}
	lockCodeListClientMockGetDatasetsByCode.Lock()
	mock.calls.GetDatasetsByCode = append(mock.calls.GetDatasetsByCode, callInfo)
	lockCodeListClientMockGetDatasetsByCode.Unlock()
	return mock.GetDatasetsByCodeFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition, codeID)
}

// GetDatasetsByCodeCalls gets all the calls that were made to GetDatasetsByCode.
// Check the length with:
//     len(mockedCodeListClient.GetDatasetsByCodeCalls())
func (mock *CodeListClientMock) GetDatasetsByCodeCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
	CodeID           string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}
	lockCodeListClientMockGetDatasetsByCode.RLock()
	calls = mock.calls.GetDatasetsByCode
	lockCodeListClientMockGetDatasetsByCode.RUnlock()
	return calls
}

// GetGeographyCodeLists calls GetGeographyCodeListsFunc.
func (mock *CodeListClientMock) GetGeographyCodeLists(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error) {
	if mock.GetGeographyCodeListsFunc == nil {
		panic("moq: CodeListClientMock.GetGeographyCodeListsFunc is nil but CodeListClient.GetGeographyCodeLists was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
	}
	lockCodeListClientMockGetGeographyCodeLists.Lock()
	mock.calls.GetGeographyCodeLists = append(mock.calls.GetGeographyCodeLists, callInfo)
	lockCodeListClientMockGetGeographyCodeLists.Unlock()
	return mock.GetGeographyCodeListsFunc(ctx, userAuthToken, serviceAuthToken)
}

// GetGeographyCodeListsCalls gets all the calls that were made to GetGeographyCodeLists.
// Check the length with:
//     len(mockedCodeListClient.GetGeographyCodeListsCalls())
func (mock *CodeListClientMock) GetGeographyCodeListsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
	}
	lockCodeListClientMockGetGeographyCodeLists.RLock()
	calls = mock.calls.GetGeographyCodeLists
	lockCodeListClientMockGetGeographyCodeLists.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *CodeListClientMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("moq: CodeListClientMock.HealthcheckFunc is nil but CodeListClient.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockCodeListClientMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockCodeListClientMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedCodeListClient.HealthcheckCalls())
func (mock *CodeListClientMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockCodeListClientMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockCodeListClientMockHealthcheck.RUnlock()
	return calls
}

var (
	lockRenderClientMockDo          sync.RWMutex
	lockRenderClientMockHealthcheck sync.RWMutex
)

// RenderClientMock is a mock implementation of RenderClient.
//
//     func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//         // make and configure a mocked RenderClient
//         mockedRenderClient := &RenderClientMock{
//             DoFunc: func(in1 string, in2 []byte) ([]byte, error) {
// 	               panic("TODO: mock out the Do method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("TODO: mock out the Healthcheck method")
//             },
//         }
//
//         // TODO: use mockedRenderClient in code that requires RenderClient
//         //       and then make assertions.
//
//     }
type RenderClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(in1 string, in2 []byte) ([]byte, error)

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 []byte
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
	}
}

// Do calls DoFunc.
func (mock *RenderClientMock) Do(in1 string, in2 []byte) ([]byte, error) {
	if mock.DoFunc == nil {
		panic("moq: RenderClientMock.DoFunc is nil but RenderClient.Do was just called")
	}
	callInfo := struct {
		In1 string
		In2 []byte
	}{
		In1: in1,
		In2: in2,
	}
	lockRenderClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRenderClientMockDo.Unlock()
	return mock.DoFunc(in1, in2)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRenderClient.DoCalls())
func (mock *RenderClientMock) DoCalls() []struct {
	In1 string
	In2 []byte
} {
	var calls []struct {
		In1 string
		In2 []byte
	}
	lockRenderClientMockDo.RLock()
	calls = mock.calls.Do
	lockRenderClientMockDo.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *RenderClientMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("moq: RenderClientMock.HealthcheckFunc is nil but RenderClient.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockRenderClientMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockRenderClientMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedRenderClient.HealthcheckCalls())
func (mock *RenderClientMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockRenderClientMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockRenderClientMockHealthcheck.RUnlock()
	return calls
}
