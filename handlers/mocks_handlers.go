// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/codelist"
	"github.com/ONSdigital/dp-api-clients-go/dataset"
	"io"
	"sync"
)

// Ensure, that CodeListClientMock does implement CodeListClient.
// If this is not the case, regenerate this file with moq.
var _ CodeListClient = &CodeListClientMock{}

// CodeListClientMock is a mock implementation of CodeListClient.
//
// 	func TestSomethingThatUsesCodeListClient(t *testing.T) {
//
// 		// make and configure a mocked CodeListClient
// 		mockedCodeListClient := &CodeListClientMock{
// 			GetCodeByIDFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error) {
// 				panic("mock out the GetCodeByID method")
// 			},
// 			GetCodeListEditionsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error) {
// 				panic("mock out the GetCodeListEditions method")
// 			},
// 			GetCodesFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error) {
// 				panic("mock out the GetCodes method")
// 			},
// 			GetDatasetsByCodeFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error) {
// 				panic("mock out the GetDatasetsByCode method")
// 			},
// 			GetGeographyCodeListsFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error) {
// 				panic("mock out the GetGeographyCodeLists method")
// 			},
// 		}
//
// 		// use mockedCodeListClient in code that requires CodeListClient
// 		// and then make assertions.
//
// 	}
type CodeListClientMock struct {
	// GetCodeByIDFunc mocks the GetCodeByID method.
	GetCodeByIDFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error)

	// GetCodeListEditionsFunc mocks the GetCodeListEditions method.
	GetCodeListEditionsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error)

	// GetCodesFunc mocks the GetCodes method.
	GetCodesFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error)

	// GetDatasetsByCodeFunc mocks the GetDatasetsByCode method.
	GetDatasetsByCodeFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error)

	// GetGeographyCodeListsFunc mocks the GetGeographyCodeLists method.
	GetGeographyCodeListsFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCodeByID holds details about calls to the GetCodeByID method.
		GetCodeByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
			// CodeID is the codeID argument value.
			CodeID string
		}
		// GetCodeListEditions holds details about calls to the GetCodeListEditions method.
		GetCodeListEditions []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
		}
		// GetCodes holds details about calls to the GetCodes method.
		GetCodes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
		}
		// GetDatasetsByCode holds details about calls to the GetDatasetsByCode method.
		GetDatasetsByCode []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
			// CodeID is the codeID argument value.
			CodeID string
		}
		// GetGeographyCodeLists holds details about calls to the GetGeographyCodeLists method.
		GetGeographyCodeLists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
		}
	}
	lockGetCodeByID           sync.RWMutex
	lockGetCodeListEditions   sync.RWMutex
	lockGetCodes              sync.RWMutex
	lockGetDatasetsByCode     sync.RWMutex
	lockGetGeographyCodeLists sync.RWMutex
}

// GetCodeByID calls GetCodeByIDFunc.
func (mock *CodeListClientMock) GetCodeByID(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.CodeResult, error) {
	if mock.GetCodeByIDFunc == nil {
		panic("CodeListClientMock.GetCodeByIDFunc: method is nil but CodeListClient.GetCodeByID was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
		CodeID:           codeID,
	}
	mock.lockGetCodeByID.Lock()
	mock.calls.GetCodeByID = append(mock.calls.GetCodeByID, callInfo)
	mock.lockGetCodeByID.Unlock()
	return mock.GetCodeByIDFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition, codeID)
}

// GetCodeByIDCalls gets all the calls that were made to GetCodeByID.
// Check the length with:
//     len(mockedCodeListClient.GetCodeByIDCalls())
func (mock *CodeListClientMock) GetCodeByIDCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
	CodeID           string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}
	mock.lockGetCodeByID.RLock()
	calls = mock.calls.GetCodeByID
	mock.lockGetCodeByID.RUnlock()
	return calls
}

// GetCodeListEditions calls GetCodeListEditionsFunc.
func (mock *CodeListClientMock) GetCodeListEditions(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string) (codelist.EditionsListResults, error) {
	if mock.GetCodeListEditionsFunc == nil {
		panic("CodeListClientMock.GetCodeListEditionsFunc: method is nil but CodeListClient.GetCodeListEditions was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
	}
	mock.lockGetCodeListEditions.Lock()
	mock.calls.GetCodeListEditions = append(mock.calls.GetCodeListEditions, callInfo)
	mock.lockGetCodeListEditions.Unlock()
	return mock.GetCodeListEditionsFunc(ctx, userAuthToken, serviceAuthToken, codeListID)
}

// GetCodeListEditionsCalls gets all the calls that were made to GetCodeListEditions.
// Check the length with:
//     len(mockedCodeListClient.GetCodeListEditionsCalls())
func (mock *CodeListClientMock) GetCodeListEditionsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
	}
	mock.lockGetCodeListEditions.RLock()
	calls = mock.calls.GetCodeListEditions
	mock.lockGetCodeListEditions.RUnlock()
	return calls
}

// GetCodes calls GetCodesFunc.
func (mock *CodeListClientMock) GetCodes(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string) (codelist.CodesResults, error) {
	if mock.GetCodesFunc == nil {
		panic("CodeListClientMock.GetCodesFunc: method is nil but CodeListClient.GetCodes was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
	}
	mock.lockGetCodes.Lock()
	mock.calls.GetCodes = append(mock.calls.GetCodes, callInfo)
	mock.lockGetCodes.Unlock()
	return mock.GetCodesFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition)
}

// GetCodesCalls gets all the calls that were made to GetCodes.
// Check the length with:
//     len(mockedCodeListClient.GetCodesCalls())
func (mock *CodeListClientMock) GetCodesCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
	}
	mock.lockGetCodes.RLock()
	calls = mock.calls.GetCodes
	mock.lockGetCodes.RUnlock()
	return calls
}

// GetDatasetsByCode calls GetDatasetsByCodeFunc.
func (mock *CodeListClientMock) GetDatasetsByCode(ctx context.Context, userAuthToken string, serviceAuthToken string, codeListID string, edition string, codeID string) (codelist.DatasetsResult, error) {
	if mock.GetDatasetsByCodeFunc == nil {
		panic("CodeListClientMock.GetDatasetsByCodeFunc: method is nil but CodeListClient.GetDatasetsByCode was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CodeListID:       codeListID,
		Edition:          edition,
		CodeID:           codeID,
	}
	mock.lockGetDatasetsByCode.Lock()
	mock.calls.GetDatasetsByCode = append(mock.calls.GetDatasetsByCode, callInfo)
	mock.lockGetDatasetsByCode.Unlock()
	return mock.GetDatasetsByCodeFunc(ctx, userAuthToken, serviceAuthToken, codeListID, edition, codeID)
}

// GetDatasetsByCodeCalls gets all the calls that were made to GetDatasetsByCode.
// Check the length with:
//     len(mockedCodeListClient.GetDatasetsByCodeCalls())
func (mock *CodeListClientMock) GetDatasetsByCodeCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CodeListID       string
	Edition          string
	CodeID           string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CodeListID       string
		Edition          string
		CodeID           string
	}
	mock.lockGetDatasetsByCode.RLock()
	calls = mock.calls.GetDatasetsByCode
	mock.lockGetDatasetsByCode.RUnlock()
	return calls
}

// GetGeographyCodeLists calls GetGeographyCodeListsFunc.
func (mock *CodeListClientMock) GetGeographyCodeLists(ctx context.Context, userAuthToken string, serviceAuthToken string) (codelist.CodeListResults, error) {
	if mock.GetGeographyCodeListsFunc == nil {
		panic("CodeListClientMock.GetGeographyCodeListsFunc: method is nil but CodeListClient.GetGeographyCodeLists was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
	}
	mock.lockGetGeographyCodeLists.Lock()
	mock.calls.GetGeographyCodeLists = append(mock.calls.GetGeographyCodeLists, callInfo)
	mock.lockGetGeographyCodeLists.Unlock()
	return mock.GetGeographyCodeListsFunc(ctx, userAuthToken, serviceAuthToken)
}

// GetGeographyCodeListsCalls gets all the calls that were made to GetGeographyCodeLists.
// Check the length with:
//     len(mockedCodeListClient.GetGeographyCodeListsCalls())
func (mock *CodeListClientMock) GetGeographyCodeListsCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
	}
	mock.lockGetGeographyCodeLists.RLock()
	calls = mock.calls.GetGeographyCodeLists
	mock.lockGetGeographyCodeLists.RUnlock()
	return calls
}

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
// 	func TestSomethingThatUsesRenderClient(t *testing.T) {
//
// 		// make and configure a mocked RenderClient
// 		mockedRenderClient := &RenderClientMock{
// 			PageFunc: func(w io.Writer, page interface{}, templateName string)  {
// 				panic("mock out the Page method")
// 			},
// 		}
//
// 		// use mockedRenderClient in code that requires RenderClient
// 		// and then make assertions.
//
// 	}
type RenderClientMock struct {
	// PageFunc mocks the Page method.
	PageFunc func(w io.Writer, page interface{}, templateName string)

	// calls tracks calls to the methods.
	calls struct {
		// Page holds details about calls to the Page method.
		Page []struct {
			// W is the w argument value.
			W io.Writer
			// Page is the page argument value.
			Page interface{}
			// TemplateName is the templateName argument value.
			TemplateName string
		}
	}
	lockPage sync.RWMutex
}

// Page calls PageFunc.
func (mock *RenderClientMock) Page(w io.Writer, page interface{}, templateName string) {
	if mock.PageFunc == nil {
		panic("RenderClientMock.PageFunc: method is nil but RenderClient.Page was just called")
	}
	callInfo := struct {
		W            io.Writer
		Page         interface{}
		TemplateName string
	}{
		W:            w,
		Page:         page,
		TemplateName: templateName,
	}
	mock.lockPage.Lock()
	mock.calls.Page = append(mock.calls.Page, callInfo)
	mock.lockPage.Unlock()
	mock.PageFunc(w, page, templateName)
}

// PageCalls gets all the calls that were made to Page.
// Check the length with:
//     len(mockedRenderClient.PageCalls())
func (mock *RenderClientMock) PageCalls() []struct {
	W            io.Writer
	Page         interface{}
	TemplateName string
} {
	var calls []struct {
		W            io.Writer
		Page         interface{}
		TemplateName string
	}
	mock.lockPage.RLock()
	calls = mock.calls.Page
	mock.lockPage.RUnlock()
	return calls
}

// Ensure, that DatasetClientMock does implement DatasetClient.
// If this is not the case, regenerate this file with moq.
var _ DatasetClient = &DatasetClientMock{}

// DatasetClientMock is a mock implementation of DatasetClient.
//
// 	func TestSomethingThatUsesDatasetClient(t *testing.T) {
//
// 		// make and configure a mocked DatasetClient
// 		mockedDatasetClient := &DatasetClientMock{
// 			GetFunc: func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string) (dataset.DatasetDetails, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedDatasetClient in code that requires DatasetClient
// 		// and then make assertions.
//
// 	}
type DatasetClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string) (dataset.DatasetDetails, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAuthToken is the userAuthToken argument value.
			UserAuthToken string
			// ServiceAuthToken is the serviceAuthToken argument value.
			ServiceAuthToken string
			// CollectionID is the collectionID argument value.
			CollectionID string
			// DatasetID is the datasetID argument value.
			DatasetID string
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *DatasetClientMock) Get(ctx context.Context, userAuthToken string, serviceAuthToken string, collectionID string, datasetID string) (dataset.DatasetDetails, error) {
	if mock.GetFunc == nil {
		panic("DatasetClientMock.GetFunc: method is nil but DatasetClient.Get was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
	}{
		Ctx:              ctx,
		UserAuthToken:    userAuthToken,
		ServiceAuthToken: serviceAuthToken,
		CollectionID:     collectionID,
		DatasetID:        datasetID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, userAuthToken, serviceAuthToken, collectionID, datasetID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDatasetClient.GetCalls())
func (mock *DatasetClientMock) GetCalls() []struct {
	Ctx              context.Context
	UserAuthToken    string
	ServiceAuthToken string
	CollectionID     string
	DatasetID        string
} {
	var calls []struct {
		Ctx              context.Context
		UserAuthToken    string
		ServiceAuthToken string
		CollectionID     string
		DatasetID        string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
