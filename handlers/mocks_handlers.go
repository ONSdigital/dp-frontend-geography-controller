// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package handlers

import (
	"github.com/ONSdigital/go-ns/clients/codelist"
	"sync"
)

var (
	lockCodeListClientMockGetCodeListEditions sync.RWMutex
	lockCodeListClientMockGetCodes            sync.RWMutex
	lockCodeListClientMockHealthcheck         sync.RWMutex
)

// CodeListClientMock is a mock implementation of CodeListClient.
//
//     func TestSomethingThatUsesCodeListClient(t *testing.T) {
//
//         // make and configure a mocked CodeListClient
//         mockedCodeListClient := &CodeListClientMock{
//             GetCodeListEditionsFunc: func(codeListID string) (codelist.EditionsListResults, error) {
// 	               panic("TODO: mock out the GetCodeListEditions method")
//             },
//             GetCodesFunc: func(codeListID string, edition string) (codelist.CodesResults, error) {
// 	               panic("TODO: mock out the GetCodes method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("TODO: mock out the Healthcheck method")
//             },
//         }
//
//         // TODO: use mockedCodeListClient in code that requires CodeListClient
//         //       and then make assertions.
//
//     }
type CodeListClientMock struct {
	// GetCodeListEditionsFunc mocks the GetCodeListEditions method.
	GetCodeListEditionsFunc func(codeListID string) (codelist.EditionsListResults, error)

	// GetCodesFunc mocks the GetCodes method.
	GetCodesFunc func(codeListID string, edition string) (codelist.CodesResults, error)

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetCodeListEditions holds details about calls to the GetCodeListEditions method.
		GetCodeListEditions []struct {
			// CodeListID is the codeListID argument value.
			CodeListID string
		}
		// GetCodes holds details about calls to the GetCodes method.
		GetCodes []struct {
			// CodeListID is the codeListID argument value.
			CodeListID string
			// Edition is the edition argument value.
			Edition string
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
	}
}

// GetCodeListEditions calls GetCodeListEditionsFunc.
func (mock *CodeListClientMock) GetCodeListEditions(codeListID string) (codelist.EditionsListResults, error) {
	if mock.GetCodeListEditionsFunc == nil {
		panic("CodeListClientMock.GetCodeListEditionsFunc: method is nil but CodeListClient.GetCodeListEditions was just called")
	}
	callInfo := struct {
		CodeListID string
	}{
		CodeListID: codeListID,
	}
	lockCodeListClientMockGetCodeListEditions.Lock()
	mock.calls.GetCodeListEditions = append(mock.calls.GetCodeListEditions, callInfo)
	lockCodeListClientMockGetCodeListEditions.Unlock()
	return mock.GetCodeListEditionsFunc(codeListID)
}

// GetCodeListEditionsCalls gets all the calls that were made to GetCodeListEditions.
// Check the length with:
//     len(mockedCodeListClient.GetCodeListEditionsCalls())
func (mock *CodeListClientMock) GetCodeListEditionsCalls() []struct {
	CodeListID string
} {
	var calls []struct {
		CodeListID string
	}
	lockCodeListClientMockGetCodeListEditions.RLock()
	calls = mock.calls.GetCodeListEditions
	lockCodeListClientMockGetCodeListEditions.RUnlock()
	return calls
}

// GetCodes calls GetCodesFunc.
func (mock *CodeListClientMock) GetCodes(codeListID string, edition string) (codelist.CodesResults, error) {
	if mock.GetCodesFunc == nil {
		panic("CodeListClientMock.GetCodesFunc: method is nil but CodeListClient.GetCodes was just called")
	}
	callInfo := struct {
		CodeListID string
		Edition    string
	}{
		CodeListID: codeListID,
		Edition:    edition,
	}
	lockCodeListClientMockGetCodes.Lock()
	mock.calls.GetCodes = append(mock.calls.GetCodes, callInfo)
	lockCodeListClientMockGetCodes.Unlock()
	return mock.GetCodesFunc(codeListID, edition)
}

// GetCodesCalls gets all the calls that were made to GetCodes.
// Check the length with:
//     len(mockedCodeListClient.GetCodesCalls())
func (mock *CodeListClientMock) GetCodesCalls() []struct {
	CodeListID string
	Edition    string
} {
	var calls []struct {
		CodeListID string
		Edition    string
	}
	lockCodeListClientMockGetCodes.RLock()
	calls = mock.calls.GetCodes
	lockCodeListClientMockGetCodes.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *CodeListClientMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("CodeListClientMock.HealthcheckFunc: method is nil but CodeListClient.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockCodeListClientMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockCodeListClientMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedCodeListClient.HealthcheckCalls())
func (mock *CodeListClientMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockCodeListClientMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockCodeListClientMockHealthcheck.RUnlock()
	return calls
}

var (
	lockRenderClientMockDo          sync.RWMutex
	lockRenderClientMockHealthcheck sync.RWMutex
)

// RenderClientMock is a mock implementation of RenderClient.
//
//     func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//         // make and configure a mocked RenderClient
//         mockedRenderClient := &RenderClientMock{
//             DoFunc: func(in1 string, in2 []byte) ([]byte, error) {
// 	               panic("TODO: mock out the Do method")
//             },
//             HealthcheckFunc: func() (string, error) {
// 	               panic("TODO: mock out the Healthcheck method")
//             },
//         }
//
//         // TODO: use mockedRenderClient in code that requires RenderClient
//         //       and then make assertions.
//
//     }
type RenderClientMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(in1 string, in2 []byte) ([]byte, error)

	// HealthcheckFunc mocks the Healthcheck method.
	HealthcheckFunc func() (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// In1 is the in1 argument value.
			In1 string
			// In2 is the in2 argument value.
			In2 []byte
		}
		// Healthcheck holds details about calls to the Healthcheck method.
		Healthcheck []struct {
		}
	}
}

// Do calls DoFunc.
func (mock *RenderClientMock) Do(in1 string, in2 []byte) ([]byte, error) {
	if mock.DoFunc == nil {
		panic("RenderClientMock.DoFunc: method is nil but RenderClient.Do was just called")
	}
	callInfo := struct {
		In1 string
		In2 []byte
	}{
		In1: in1,
		In2: in2,
	}
	lockRenderClientMockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	lockRenderClientMockDo.Unlock()
	return mock.DoFunc(in1, in2)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRenderClient.DoCalls())
func (mock *RenderClientMock) DoCalls() []struct {
	In1 string
	In2 []byte
} {
	var calls []struct {
		In1 string
		In2 []byte
	}
	lockRenderClientMockDo.RLock()
	calls = mock.calls.Do
	lockRenderClientMockDo.RUnlock()
	return calls
}

// Healthcheck calls HealthcheckFunc.
func (mock *RenderClientMock) Healthcheck() (string, error) {
	if mock.HealthcheckFunc == nil {
		panic("RenderClientMock.HealthcheckFunc: method is nil but RenderClient.Healthcheck was just called")
	}
	callInfo := struct {
	}{}
	lockRenderClientMockHealthcheck.Lock()
	mock.calls.Healthcheck = append(mock.calls.Healthcheck, callInfo)
	lockRenderClientMockHealthcheck.Unlock()
	return mock.HealthcheckFunc()
}

// HealthcheckCalls gets all the calls that were made to Healthcheck.
// Check the length with:
//     len(mockedRenderClient.HealthcheckCalls())
func (mock *RenderClientMock) HealthcheckCalls() []struct {
} {
	var calls []struct {
	}
	lockRenderClientMockHealthcheck.RLock()
	calls = mock.calls.Healthcheck
	lockRenderClientMockHealthcheck.RUnlock()
	return calls
}
